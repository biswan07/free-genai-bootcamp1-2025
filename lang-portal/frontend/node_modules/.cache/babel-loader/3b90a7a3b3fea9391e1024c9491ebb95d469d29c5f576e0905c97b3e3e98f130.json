{"ast":null,"code":"var _jsxFileName = \"/home/biswan02/free-genai-bootcamp1-2025_Windsurf/free-genai-bootcamp1-2025/lang-portal/frontend/src/pages/Words.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { wordsAPI, groupsAPI, studySessionsAPI } from '../services/api';\nimport { Container, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, CircularProgress, Box, Button, Stack, TablePagination, Checkbox, Dialog, DialogTitle, DialogContent, DialogActions, TextField, FormControl, InputLabel, Select, MenuItem, Alert } from '@mui/material';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport FlashcardIcon from '@mui/icons-material/School';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Words = () => {\n  _s();\n  const navigate = useNavigate();\n  const [words, setWords] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [page, setPage] = useState(0);\n  const [totalWords, setTotalWords] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [selectedWords, setSelectedWords] = useState([]);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [newGroupName, setNewGroupName] = useState('');\n  const [groups, setGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState('');\n  const [createNewGroup, setCreateNewGroup] = useState(false);\n  const [flashcardDialogOpen, setFlashcardDialogOpen] = useState(false);\n  const fetchWords = async (pageNum = 1) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await wordsAPI.getAll(pageNum);\n      if (pageNum === 1) {\n        setWords(response.data.words || []);\n      } else {\n        setWords(prev => [...prev, ...(response.data.words || [])]);\n      }\n      setTotalWords(response.data.total || 0);\n\n      // If there are more pages, fetch them\n      if (pageNum < response.data.pages) {\n        await fetchWords(pageNum + 1);\n      }\n    } catch (err) {\n      console.error('Error fetching words:', err);\n      setError('Failed to fetch words. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchGroups = async () => {\n    try {\n      const response = await groupsAPI.getAll();\n      setGroups(response.data.groups || []);\n    } catch (err) {\n      console.error('Error fetching groups:', err);\n    }\n  };\n  useEffect(() => {\n    fetchWords(1);\n    fetchGroups();\n  }, []);\n  const handleRefresh = () => {\n    fetchWords(1);\n    fetchGroups();\n  };\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  const handleSelectWord = wordId => {\n    setSelectedWords(prev => {\n      if (prev.includes(wordId)) {\n        return prev.filter(id => id !== wordId);\n      } else {\n        return [...prev, wordId];\n      }\n    });\n  };\n  const handleSelectAllWords = event => {\n    if (event.target.checked) {\n      setSelectedWords(displayedWords.map(word => word.id));\n    } else {\n      setSelectedWords([]);\n    }\n  };\n  const handleOpenDialog = () => {\n    setOpenDialog(true);\n  };\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n    setNewGroupName('');\n    setSelectedGroup('');\n    setCreateNewGroup(false);\n  };\n  const handleOpenFlashcardDialog = () => {\n    setFlashcardDialogOpen(true);\n  };\n  const handleCloseFlashcardDialog = () => {\n    setFlashcardDialogOpen(false);\n    setSelectedGroup('');\n  };\n  const handleCreateGroup = async () => {\n    try {\n      if (createNewGroup && !newGroupName.trim()) {\n        alert('Please enter a group name');\n        return;\n      }\n      let groupId;\n      if (createNewGroup) {\n        // Create new group\n        const response = await groupsAPI.create({\n          name: newGroupName\n        });\n        groupId = response.data.id;\n\n        // Add selected words to the new group\n        for (const wordId of selectedWords) {\n          await wordsAPI.update(wordId, {\n            group_ids: [groupId]\n          });\n        }\n      } else {\n        var _groupResponse$data$w;\n        // Add selected words to existing group\n        groupId = selectedGroup;\n\n        // Get current words in the group\n        const groupResponse = await groupsAPI.getById(groupId);\n        const currentWordIds = ((_groupResponse$data$w = groupResponse.data.words) === null || _groupResponse$data$w === void 0 ? void 0 : _groupResponse$data$w.map(word => word.id)) || [];\n\n        // Add selected words to the group\n        for (const wordId of selectedWords) {\n          if (!currentWordIds.includes(wordId)) {\n            await wordsAPI.update(wordId, {\n              group_ids: [...currentWordIds, wordId]\n            });\n          }\n        }\n      }\n      handleCloseDialog();\n      fetchGroups();\n      alert('Words added to group successfully!');\n    } catch (err) {\n      console.error('Error creating/updating group:', err);\n      alert('Failed to add words to group. Please try again.');\n    }\n  };\n  const handleStartFlashcards = async () => {\n    try {\n      if (!selectedGroup) {\n        alert('Please select a group');\n        return;\n      }\n\n      // Navigate to flashcard session with selected group\n      navigate(`/study/1/group/${selectedGroup}`);\n      handleCloseFlashcardDialog();\n    } catch (err) {\n      console.error('Error starting flashcard session:', err);\n      alert('Failed to start flashcard session. Please try again.');\n    }\n  };\n  if (loading && words.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"200px\",\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      minHeight: \"200px\",\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this);\n  }\n  const displayedWords = words.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n  const isAllSelected = displayedWords.length > 0 && selectedWords.length === displayedWords.length;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      mb: 3,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: \"Words\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          startIcon: /*#__PURE__*/_jsxDEV(FlashcardIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 24\n          }, this),\n          onClick: () => navigate('/study/1/flashcards'),\n          children: \"Practice All Words\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), selectedWords.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            startIcon: /*#__PURE__*/_jsxDEV(FlashcardIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 28\n            }, this),\n            onClick: handleOpenFlashcardDialog,\n            children: \"Practice Selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handleOpenDialog,\n            children: \"Add to Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          startIcon: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 24\n          }, this),\n          onClick: handleRefresh,\n          disabled: loading,\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), selectedWords.length > 0 && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"info\",\n      sx: {\n        mb: 2\n      },\n      children: [selectedWords.length, \" word(s) selected\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              padding: \"checkbox\",\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                indeterminate: selectedWords.length > 0 && selectedWords.length < displayedWords.length,\n                checked: isAllSelected,\n                onChange: handleSelectAllWords\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"English\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"French\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Correct Count\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Wrong Count\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: displayedWords.map(word => {\n            var _word$stats, _word$stats2;\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              selected: selectedWords.includes(word.id),\n              onClick: () => handleSelectWord(word.id),\n              hover: true,\n              sx: {\n                cursor: 'pointer'\n              },\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                padding: \"checkbox\",\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: selectedWords.includes(word.id),\n                  onChange: e => {\n                    e.stopPropagation();\n                    handleSelectWord(word.id);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: word.english\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: word.french\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: ((_word$stats = word.stats) === null || _word$stats === void 0 ? void 0 : _word$stats.correct_count) || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: ((_word$stats2 = word.stats) === null || _word$stats2 === void 0 ? void 0 : _word$stats2.wrong_count) || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 17\n              }, this)]\n            }, word.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n        rowsPerPageOptions: [10, 25, 50],\n        component: \"div\",\n        count: totalWords,\n        rowsPerPage: rowsPerPage,\n        page: page,\n        onPageChange: handleChangePage,\n        onRowsPerPageChange: handleChangeRowsPerPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: openDialog,\n      onClose: handleCloseDialog,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Add Words to Group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"group-select-label\",\n              children: \"Group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"group-select-label\",\n              value: createNewGroup ? \"new\" : selectedGroup,\n              label: \"Group\",\n              onChange: e => {\n                if (e.target.value === \"new\") {\n                  setCreateNewGroup(true);\n                  setSelectedGroup('');\n                } else {\n                  setCreateNewGroup(false);\n                  setSelectedGroup(e.target.value);\n                }\n              },\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"new\",\n                children: \"Create New Group\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 17\n              }, this), groups.map(group => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: group.id,\n                children: group.name\n              }, group.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), createNewGroup && /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            label: \"New Group Name\",\n            value: newGroupName,\n            onChange: e => setNewGroupName(e.target.value),\n            sx: {\n              mb: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseDialog,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCreateGroup,\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Add to Group\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: flashcardDialogOpen,\n      onClose: handleCloseFlashcardDialog,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Practice with Flashcards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"flashcard-group-select-label\",\n              children: \"Select Group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"flashcard-group-select-label\",\n              value: selectedGroup,\n              label: \"Select Group\",\n              onChange: e => setSelectedGroup(e.target.value),\n              children: groups.map(group => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: group.id,\n                children: group.name\n              }, group.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseFlashcardDialog,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleStartFlashcards,\n          variant: \"contained\",\n          color: \"primary\",\n          disabled: !selectedGroup,\n          children: \"Start Flashcards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n_s(Words, \"2B1/yCeHsXm9Y91oX/qYLGJRSsg=\", false, function () {\n  return [useNavigate];\n});\n_c = Words;\nexport default Words;\nvar _c;\n$RefreshReg$(_c, \"Words\");","map":{"version":3,"names":["React","useState","useEffect","wordsAPI","groupsAPI","studySessionsAPI","Container","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","CircularProgress","Box","Button","Stack","TablePagination","Checkbox","Dialog","DialogTitle","DialogContent","DialogActions","TextField","FormControl","InputLabel","Select","MenuItem","Alert","RefreshIcon","FlashcardIcon","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Words","_s","navigate","words","setWords","loading","setLoading","error","setError","page","setPage","totalWords","setTotalWords","rowsPerPage","setRowsPerPage","selectedWords","setSelectedWords","openDialog","setOpenDialog","newGroupName","setNewGroupName","groups","setGroups","selectedGroup","setSelectedGroup","createNewGroup","setCreateNewGroup","flashcardDialogOpen","setFlashcardDialogOpen","fetchWords","pageNum","response","getAll","data","prev","total","pages","err","console","fetchGroups","handleRefresh","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","value","handleSelectWord","wordId","includes","filter","id","handleSelectAllWords","checked","displayedWords","map","word","handleOpenDialog","handleCloseDialog","handleOpenFlashcardDialog","handleCloseFlashcardDialog","handleCreateGroup","trim","alert","groupId","create","name","update","group_ids","_groupResponse$data$w","groupResponse","getById","currentWordIds","handleStartFlashcards","length","display","justifyContent","alignItems","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","color","slice","isAllSelected","direction","mb","variant","spacing","startIcon","onClick","disabled","severity","sx","component","padding","indeterminate","onChange","_word$stats","_word$stats2","selected","hover","cursor","e","stopPropagation","english","french","stats","correct_count","wrong_count","rowsPerPageOptions","count","onPageChange","onRowsPerPageChange","open","onClose","mt","fullWidth","labelId","label","group","_c","$RefreshReg$"],"sources":["/home/biswan02/free-genai-bootcamp1-2025_Windsurf/free-genai-bootcamp1-2025/lang-portal/frontend/src/pages/Words.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { wordsAPI, groupsAPI, studySessionsAPI } from '../services/api';\nimport {\n  Container,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  CircularProgress,\n  Box,\n  Button,\n  Stack,\n  TablePagination,\n  Checkbox,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n} from '@mui/material';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport FlashcardIcon from '@mui/icons-material/School';\nimport { useNavigate } from 'react-router-dom';\n\nconst Words = () => {\n  const navigate = useNavigate();\n  const [words, setWords] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [page, setPage] = useState(0);\n  const [totalWords, setTotalWords] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [selectedWords, setSelectedWords] = useState([]);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [newGroupName, setNewGroupName] = useState('');\n  const [groups, setGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState('');\n  const [createNewGroup, setCreateNewGroup] = useState(false);\n  const [flashcardDialogOpen, setFlashcardDialogOpen] = useState(false);\n\n  const fetchWords = async (pageNum = 1) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await wordsAPI.getAll(pageNum);\n      if (pageNum === 1) {\n        setWords(response.data.words || []);\n      } else {\n        setWords(prev => [...prev, ...(response.data.words || [])]);\n      }\n      setTotalWords(response.data.total || 0);\n      \n      // If there are more pages, fetch them\n      if (pageNum < response.data.pages) {\n        await fetchWords(pageNum + 1);\n      }\n    } catch (err) {\n      console.error('Error fetching words:', err);\n      setError('Failed to fetch words. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchGroups = async () => {\n    try {\n      const response = await groupsAPI.getAll();\n      setGroups(response.data.groups || []);\n    } catch (err) {\n      console.error('Error fetching groups:', err);\n    }\n  };\n\n  useEffect(() => {\n    fetchWords(1);\n    fetchGroups();\n  }, []);\n\n  const handleRefresh = () => {\n    fetchWords(1);\n    fetchGroups();\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleSelectWord = (wordId) => {\n    setSelectedWords(prev => {\n      if (prev.includes(wordId)) {\n        return prev.filter(id => id !== wordId);\n      } else {\n        return [...prev, wordId];\n      }\n    });\n  };\n\n  const handleSelectAllWords = (event) => {\n    if (event.target.checked) {\n      setSelectedWords(displayedWords.map(word => word.id));\n    } else {\n      setSelectedWords([]);\n    }\n  };\n\n  const handleOpenDialog = () => {\n    setOpenDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n    setNewGroupName('');\n    setSelectedGroup('');\n    setCreateNewGroup(false);\n  };\n\n  const handleOpenFlashcardDialog = () => {\n    setFlashcardDialogOpen(true);\n  };\n\n  const handleCloseFlashcardDialog = () => {\n    setFlashcardDialogOpen(false);\n    setSelectedGroup('');\n  };\n\n  const handleCreateGroup = async () => {\n    try {\n      if (createNewGroup && !newGroupName.trim()) {\n        alert('Please enter a group name');\n        return;\n      }\n\n      let groupId;\n      \n      if (createNewGroup) {\n        // Create new group\n        const response = await groupsAPI.create({ name: newGroupName });\n        groupId = response.data.id;\n        \n        // Add selected words to the new group\n        for (const wordId of selectedWords) {\n          await wordsAPI.update(wordId, { group_ids: [groupId] });\n        }\n      } else {\n        // Add selected words to existing group\n        groupId = selectedGroup;\n        \n        // Get current words in the group\n        const groupResponse = await groupsAPI.getById(groupId);\n        const currentWordIds = groupResponse.data.words?.map(word => word.id) || [];\n        \n        // Add selected words to the group\n        for (const wordId of selectedWords) {\n          if (!currentWordIds.includes(wordId)) {\n            await wordsAPI.update(wordId, { \n              group_ids: [...currentWordIds, wordId]\n            });\n          }\n        }\n      }\n      \n      handleCloseDialog();\n      fetchGroups();\n      alert('Words added to group successfully!');\n    } catch (err) {\n      console.error('Error creating/updating group:', err);\n      alert('Failed to add words to group. Please try again.');\n    }\n  };\n\n  const handleStartFlashcards = async () => {\n    try {\n      if (!selectedGroup) {\n        alert('Please select a group');\n        return;\n      }\n      \n      // Navigate to flashcard session with selected group\n      navigate(`/study/1/group/${selectedGroup}`);\n      handleCloseFlashcardDialog();\n    } catch (err) {\n      console.error('Error starting flashcard session:', err);\n      alert('Failed to start flashcard session. Please try again.');\n    }\n  };\n\n  if (loading && words.length === 0) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n        <Typography color=\"error\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  const displayedWords = words.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n  const isAllSelected = displayedWords.length > 0 && selectedWords.length === displayedWords.length;\n\n  return (\n    <Container>\n      <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\">Words</Typography>\n        <Stack direction=\"row\" spacing={2}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<FlashcardIcon />}\n            onClick={() => navigate('/study/1/flashcards')}\n          >\n            Practice All Words\n          </Button>\n          {selectedWords.length > 0 && (\n            <>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                startIcon={<FlashcardIcon />}\n                onClick={handleOpenFlashcardDialog}\n              >\n                Practice Selected\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleOpenDialog}\n              >\n                Add to Group\n              </Button>\n            </>\n          )}\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<RefreshIcon />}\n            onClick={handleRefresh}\n            disabled={loading}\n          >\n            Refresh\n          </Button>\n        </Stack>\n      </Stack>\n\n      {selectedWords.length > 0 && (\n        <Alert severity=\"info\" sx={{ mb: 2 }}>\n          {selectedWords.length} word(s) selected\n        </Alert>\n      )}\n\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  indeterminate={selectedWords.length > 0 && selectedWords.length < displayedWords.length}\n                  checked={isAllSelected}\n                  onChange={handleSelectAllWords}\n                />\n              </TableCell>\n              <TableCell>English</TableCell>\n              <TableCell>French</TableCell>\n              <TableCell>Correct Count</TableCell>\n              <TableCell>Wrong Count</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {displayedWords.map((word) => (\n              <TableRow \n                key={word.id}\n                selected={selectedWords.includes(word.id)}\n                onClick={() => handleSelectWord(word.id)}\n                hover\n                sx={{ cursor: 'pointer' }}\n              >\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={selectedWords.includes(word.id)}\n                    onChange={(e) => {\n                      e.stopPropagation();\n                      handleSelectWord(word.id);\n                    }}\n                  />\n                </TableCell>\n                <TableCell>{word.english}</TableCell>\n                <TableCell>{word.french}</TableCell>\n                <TableCell>{word.stats?.correct_count || 0}</TableCell>\n                <TableCell>{word.stats?.wrong_count || 0}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TablePagination\n          rowsPerPageOptions={[10, 25, 50]}\n          component=\"div\"\n          count={totalWords}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </TableContainer>\n\n      {/* Add to Group Dialog */}\n      <Dialog open={openDialog} onClose={handleCloseDialog}>\n        <DialogTitle>Add Words to Group</DialogTitle>\n        <DialogContent>\n          <Box sx={{ mt: 2 }}>\n            <FormControl fullWidth sx={{ mb: 2 }}>\n              <InputLabel id=\"group-select-label\">Group</InputLabel>\n              <Select\n                labelId=\"group-select-label\"\n                value={createNewGroup ? \"new\" : selectedGroup}\n                label=\"Group\"\n                onChange={(e) => {\n                  if (e.target.value === \"new\") {\n                    setCreateNewGroup(true);\n                    setSelectedGroup('');\n                  } else {\n                    setCreateNewGroup(false);\n                    setSelectedGroup(e.target.value);\n                  }\n                }}\n              >\n                <MenuItem value=\"new\">Create New Group</MenuItem>\n                {groups.map((group) => (\n                  <MenuItem key={group.id} value={group.id}>{group.name}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n\n            {createNewGroup && (\n              <TextField\n                fullWidth\n                label=\"New Group Name\"\n                value={newGroupName}\n                onChange={(e) => setNewGroupName(e.target.value)}\n                sx={{ mb: 2 }}\n              />\n            )}\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog}>Cancel</Button>\n          <Button onClick={handleCreateGroup} variant=\"contained\" color=\"primary\">\n            Add to Group\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Start Flashcard Dialog */}\n      <Dialog open={flashcardDialogOpen} onClose={handleCloseFlashcardDialog}>\n        <DialogTitle>Practice with Flashcards</DialogTitle>\n        <DialogContent>\n          <Box sx={{ mt: 2 }}>\n            <FormControl fullWidth sx={{ mb: 2 }}>\n              <InputLabel id=\"flashcard-group-select-label\">Select Group</InputLabel>\n              <Select\n                labelId=\"flashcard-group-select-label\"\n                value={selectedGroup}\n                label=\"Select Group\"\n                onChange={(e) => setSelectedGroup(e.target.value)}\n              >\n                {groups.map((group) => (\n                  <MenuItem key={group.id} value={group.id}>{group.name}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseFlashcardDialog}>Cancel</Button>\n          <Button \n            onClick={handleStartFlashcards} \n            variant=\"contained\" \n            color=\"primary\"\n            disabled={!selectedGroup}\n          >\n            Start Flashcards\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default Words;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}